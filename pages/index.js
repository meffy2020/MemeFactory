"use client"; // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏°ÏóêÏÑú Ïã§ÌñâÎêúÎã§Îäî Í≤ÉÏùÑ ÎÇòÌÉÄÎÉÑ
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { saveAs } from 'file-saver';
import Layout from '../components/layout';

// ÏÉòÌîå Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú ÏÑ§Ï†ï
const sampleImage = '/test.webp'; 

const Home = () => {
  // ÏÉÅÌÉú Î≥ÄÏàò ÏÑ§Ï†ï
  const [image, setImage] = useState(sampleImage); // Ïù¥ÎØ∏ÏßÄ ÏÉÅÌÉú
  const [date, setDate] = useState('5(Wen)'); // ÎÇ†Ïßú ÏÉÅÌÉú
  const [time, setTime] = useState('13:00'); // ÏãúÍ∞Ñ ÏÉÅÌÉú
  const [name, setName] = useState('Ìë∏Î∞îÏò§(2)'); // Ïù¥Î¶Ñ ÏÉÅÌÉú
  const [job, setJob] = useState('Ïß§ ÎßåÎìúÎäî Í≥µÍ∞Ñ'); // ÏßÅÏóÖ ÏÉÅÌÉú
  const [quote1, setQuote1] = useState('Ïù¥Î†áÍ≤å ÎßåÎì§ Ïàò ÏûàÏñ¥Ïöî!'); // Ï≤´ Î≤àÏß∏ ÎåÄÏÇ¨ ÏÉÅÌÉú
  const [quote2, setQuote2] = useState('Ïó¨Í∏∞Î•º ÎàåÎü¨ ÏÇ¨ÏßÑ ÏÑ†ÌÉù üì∑'); // Îëê Î≤àÏß∏ ÎåÄÏÇ¨ ÏÉÅÌÉú
  const [memeStyle, setMemeStyle] = useState('ingan'); // Î∞à Ïä§ÌÉÄÏùº ÏÉÅÌÉú
  const canvasRef = useRef(null); // Ï∫îÎ≤ÑÏä§ Ï∞∏Ï°∞
  const [isClient, setIsClient] = useState(false); // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° Î†åÎçîÎßÅ Ïó¨Î∂Ä

  useEffect(() => {
    setIsClient(true); // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏°ÏóêÏÑú ÎßàÏö¥Ìä∏Îêú ÌõÑÏóêÎßå Î†åÎçîÎßÅÎêòÎèÑÎ°ù ÏÑ§Ï†ï
  }, []);

  // Î∞àÏùÑ Í∑∏Î¶¨Îäî Ìï®Ïàò
  const drawMeme = useCallback((ctx) => {
    const img = new Image();
    img.src = image;
    img.onload = () => {
      ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height); // Ïù¥ÎØ∏ÏßÄÎ•º Ï∫îÎ≤ÑÏä§Ïóê Í∑∏Î¶¨Í∏∞
      ctx.font = 'normal 16px Gowun Batang'; // Í∏ÄÍº¥ ÏÑ§Ï†ï
      ctx.fillStyle = 'white'; // Í∏ÄÏûê ÏÉâÏÉÅ ÏÑ§Ï†ï
      ctx.strokeStyle = 'White'; // Í∏ÄÏûê Ïô∏Í≥ΩÏÑ† ÏÉâÏÉÅ ÏÑ§Ï†ï
      ctx.lineWidth = 1; // Ïô∏Í≥ΩÏÑ† ÎëêÍªò ÏÑ§Ï†ï

      // ÎÇ†ÏßúÏôÄ ÏãúÍ∞ÑÏùÑ Ï∫îÎ≤ÑÏä§Ïóê Í∑∏Î¶¨Í∏∞
      ctx.textAlign = 'left';
      ctx.fillText(date, 10, 30);
      ctx.strokeText(date, 10, 30);
      ctx.fillText(time, 10, 60);
      ctx.strokeText(time, 10, 60);

      // Ïù¥Î¶ÑÍ≥º ÏßÅÏóÖÏùÑ Ï∫îÎ≤ÑÏä§Ïóê Í∑∏Î¶¨Í∏∞
      ctx.textAlign = 'center';
      ctx.fillText(`${name} / ${job}`, ctx.canvas.width / 2, ctx.canvas.height - 80);
      ctx.strokeText(`${name} / ${job}`, ctx.canvas.width / 2, ctx.canvas.height - 80);

      // Ï≤´ Î≤àÏß∏ ÎåÄÏÇ¨ÏôÄ Îëê Î≤àÏß∏ ÎåÄÏÇ¨Î•º Ï∫îÎ≤ÑÏä§Ïóê Í∑∏Î¶¨Í∏∞
      ctx.fillStyle = 'yellow';
      ctx.fillText(quote1, ctx.canvas.width / 2, ctx.canvas.height - 50);
      ctx.strokeText(quote1, ctx.canvas.width / 2, ctx.canvas.height - 50);

      ctx.fillStyle = 'white';
      ctx.fillText(quote2, ctx.canvas.width / 2, ctx.canvas.height - 20);
      ctx.strokeText(quote2, ctx.canvas.width / 2, ctx.canvas.height - 20);
    };
  }, [image, date, time, name, job, quote1, quote2]);

  // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Î†åÎçîÎßÅÎê† ÎïåÎßàÎã§ Ïù¥ÎØ∏ÏßÄÏôÄ ÏÉÅÌÉúÎ•º Îã§Ïãú Í∑∏Î¶¨Í∏∞
  useEffect(() => {
    if (image && isClient) {
      const ctx = canvasRef.current.getContext('2d');
      drawMeme(ctx);
    }
  }, [image, date, time, name, job, quote1, quote2, memeStyle, drawMeme, isClient]);

  // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ìï∏Îì§Îü¨
  const handleImageUpload = (event) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        setImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // Î∞à Îã§Ïö¥Î°úÎìú Ìï∏Îì§Îü¨
  const handleDownload = () => {
    const canvas = canvasRef.current;
    canvas.toBlob((blob) => {
      if (blob) {
        saveAs(blob, 'meme.png');
      }
    });
  };

  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏°ÏóêÏÑúÎßå Î†åÎçîÎßÅ
  if (!isClient) return null; 

  return (
    <Layout>
      <section className="text-gray-600 body-font flex-grow pt-1 md:pt-8">
        <div className="container mx-auto flex flex-col items-center justify-center px-5 py-1 md:py-8 md:flex-row md:space-x-16 md:justify-center">
          <div className="w-full max-w-4xl flex flex-col md:flex-row items-center justify-center md:space-x-8 space-y-4 md:space-y-0">
            <div className="lg:max-w-lg lg:w-1/2 md:w-1/2 w-full mb-4 md:mb-0" onClick={() => document.getElementById('imageUpload')?.click()}>
              <canvas
                ref={canvasRef}
                id="memeCanvas"
                width="500"
                height="500"
                className="border cursor-pointer w-full h-auto mt-1 md:mt-0"
              />
              <input
                type="file"
                id="imageUpload"
                accept="image/*"
                className="hidden"
                onChange={handleImageUpload}
              />
            </div>
            <div className="lg:flex-grow md:w-1/2 flex flex-col items-center md:items-start md:text-left text-center w-full">
              <h1 className="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900 hidden md:block">Î∞àÌå©ÌÜ†Î¶¨</h1>
              <div className="mb-8 leading-relaxed hidden md:block">Î∞à ÏÑ†ÌÉù Î∞è Ïª§Ïä§ÌÖÄ ÏÑúÎπÑÏä§</div>
              <div className="mb-4 w-full max-w-lg">
                <select
                  value={memeStyle}
                  onChange={(e) => setMemeStyle(e.target.value)}
                  className="bg-gray-200 border border-gray-300 p-2 rounded w-full focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  
                  <option value="ingan">Ïù∏Í∞ÑÍ∑πÏû•</option>
                  
                </select>
              </div>
              <div className="flex mb-4 w-full max-w-lg space-x-2">
                <input
                  type="text"
                  placeholder="ÎÇ†Ïßú ÏöîÏùº"
                  value={date}
                  className="p-2 border border-gray-300 rounded w-1/2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  onChange={(e) => setDate(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="ÏãúÍ∞Ñ"
                  value={time}
                  className="p-2 border border-gray-300 rounded w-1/2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  onChange={(e) => setTime(e.target.value)}
                />
              </div>
              <div className="flex mb-4 w-full max-w-lg space-x-2">
                <input
                  type="text"
                  placeholder="Ïù¥Î¶Ñ(ÎÇòÏù¥)"
                  value={name}
                  className="p-2 border border-gray-300 rounded w-1/2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  onChange={(e) => setName(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="ÏßÅÏóÖ"
                  value={job}
                  className="p-2 border border-gray-300 rounded w-1/2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  onChange={(e) => setJob(e.target.value)}
                />
              </div>
              <div className="flex flex-col mb-4 space-y-2 w-full max-w-lg">
                <input
                  type="text"
                  placeholder="ÎåÄÏÇ¨ 1"
                  value={quote1}
                  className="p-2 border border-gray-300 rounded w-full focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  onChange={(e) => setQuote1(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="ÎåÄÏÇ¨ 2"
                  value={quote2}
                  className="p-2 border border-gray-300 rounded w-full focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  onChange={(e) => setQuote2(e.target.value)}
                />
              </div>
              <button className="bg-primary text-white p-2 rounded w-full md:w-auto mb-3 max-w-lg hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50" onClick={handleDownload}>Ïß§ ÎßåÎì§Í∏∞</button>
            </div>
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default Home;
